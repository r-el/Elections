// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220223001430_VotingArea")]
    partial class VotingArea
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.14");

            modelBuilder.Entity("API.Entities.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ElectionsId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ElectionsId");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("API.Entities.Elections", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPossibleToChangeAVote")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Elections");
                });

            modelBuilder.Entity("API.Entities.Manager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("API.Entities.Supervisor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSupervisor")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SupervisorIDId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SupervisorIDId");

                    b.ToTable("Supervisors");
                });

            modelBuilder.Entity("API.Entities.Voter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Voter");
                });

            modelBuilder.Entity("API.Entities.VoterPhoneInElections", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CandidateId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ElectionsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VoterId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("VotingAreaId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("ElectionsId");

                    b.HasIndex("VoterId");

                    b.HasIndex("VotingAreaId");

                    b.ToTable("VotersInElections");
                });

            modelBuilder.Entity("API.Entities.VotingArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("VotingAreas");
                });

            modelBuilder.Entity("API.Entities.Candidate", b =>
                {
                    b.HasOne("API.Entities.Elections", "Elections")
                        .WithMany("Candidates")
                        .HasForeignKey("ElectionsId");

                    b.Navigation("Elections");
                });

            modelBuilder.Entity("API.Entities.Elections", b =>
                {
                    b.HasOne("API.Entities.Manager", "Manager")
                        .WithMany("Elections")
                        .HasForeignKey("ManagerId");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("API.Entities.Supervisor", b =>
                {
                    b.HasOne("API.Entities.VoterPhoneInElections", "SupervisorID")
                        .WithMany()
                        .HasForeignKey("SupervisorIDId");

                    b.Navigation("SupervisorID");
                });

            modelBuilder.Entity("API.Entities.VoterPhoneInElections", b =>
                {
                    b.HasOne("API.Entities.Candidate", "Candidate")
                        .WithMany("Voters")
                        .HasForeignKey("CandidateId");

                    b.HasOne("API.Entities.Elections", "Elections")
                        .WithMany("VoterPhoneInElections")
                        .HasForeignKey("ElectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Voter", "Voter")
                        .WithMany("VotersInElections")
                        .HasForeignKey("VoterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.VotingArea", null)
                        .WithMany("Voters")
                        .HasForeignKey("VotingAreaId");

                    b.Navigation("Candidate");

                    b.Navigation("Elections");

                    b.Navigation("Voter");
                });

            modelBuilder.Entity("API.Entities.Candidate", b =>
                {
                    b.Navigation("Voters");
                });

            modelBuilder.Entity("API.Entities.Elections", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("VoterPhoneInElections");
                });

            modelBuilder.Entity("API.Entities.Manager", b =>
                {
                    b.Navigation("Elections");
                });

            modelBuilder.Entity("API.Entities.Voter", b =>
                {
                    b.Navigation("VotersInElections");
                });

            modelBuilder.Entity("API.Entities.VotingArea", b =>
                {
                    b.Navigation("Voters");
                });
#pragma warning restore 612, 618
        }
    }
}
